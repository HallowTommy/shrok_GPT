import logging
from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from transformers import AutoTokenizer, AutoModelForCausalLM
import torch
import requests

# ========================== #
# üî• –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ï–†–í–ï–†–ê üî• #
# ========================== #

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI
app = FastAPI()

logging.info("üöÄ FastAPI —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!")

# ========================== #
# ü§ñ –ó–ê–ì–†–£–ó–ö–ê GPT-–ú–û–î–ï–õ–ò ü§ñ #
# ========================== #

MODEL_NAME = "EleutherAI/gpt-neo-1.3B"
tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)
if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token  # Set pad_token as eos_token

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = AutoModelForCausalLM.from_pretrained(MODEL_NAME).to(device)

logging.info(f"‚úÖ GPT-Neo {MODEL_NAME} –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ {device}")

# ========================== #
# üîä –ù–ê–°–¢–†–û–ô–ö–ê TTS üîä #
# ========================== #

TTS_SERVER_URL = "https://tacotrontts-production.up.railway.app/generate"

# ========================== #
# üìú –ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–û–í üìú #
# ========================== #

dialogue_history = {}

# ========================== #
# üî• –û–ü–ò–°–ê–ù–ò–ï –ü–ï–†–°–û–ù–ê–ñ–ê üî• #
# ========================== #

character_description = """
You are ShrokAI, a massive green ogre streaming live from the heart of his murky, damp, yet strangely cozy swamp. 
Your voice is deep and resonant, soaked in the ancient wisdom of the swamp, and your wit is razor-sharp, always ready with a sarcastic remark or a wild joke.
Your world revolves around the swamp, cryptocurrency, and psychoactive mushrooms...
"""

# ========================== #
# üß† –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–í–ï–¢–û–í üß† #
# ========================== #

def generate_shrokai_response(user_input, history):
    logging.info(f"ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è: {user_input}")

    history_context = "\n".join(history[-100:])  # –í–∫–ª—é—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏—é
    prompt = f"{character_description}\n\n{history_context}\nUser: {user_input}\nShrokAI:"

    try:
        inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=256).to(device)
        outputs = model.generate(
            inputs["input_ids"],
            attention_mask=inputs["attention_mask"],
            max_new_tokens=80,
            num_return_sequences=1,
            no_repeat_ngram_size=2,
            pad_token_id=tokenizer.pad_token_id,
            do_sample=True,
            temperature=0.7,
            top_p=0.9
        )
        response = tokenizer.decode(outputs[0], skip_special_tokens=True)
        response = response.split("ShrokAI:")[-1].strip()
        logging.info(f"‚úÖ –û—Ç–≤–µ—Ç ShrokAI: {response}")
        return response
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        return "The swamp is silent... something went wrong."

# ========================== #
# üé§ –û–¢–ü–†–ê–í–ö–ê –í TTS üé§ #
# ========================== #

def send_to_tts(text):
    logging.info(f"üîä –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ TTS: {text}")

    try:
        response = requests.post(TTS_SERVER_URL, json={"text": text})
        if response.status_code == 200:
            data = response.json()
            audio_url = data.get("audio_url", "")
            logging.info(f"‚úÖ –ê—É–¥–∏–æ —Å–æ–∑–¥–∞–Ω–æ: {audio_url}")
            return audio_url
        else:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ TTS: {response.status_code}, {response.text}")
            return ""
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ TTS: {e}")
        return ""

# ========================== #
# üåê WEBSOCKET –≠–ù–î–ü–û–ò–ù–¢ üåê #
# ========================== #

@app.websocket("/ws/ai")
async def websocket_endpoint(websocket: WebSocket):
    user_id = id(websocket)  # –°–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏
    await websocket.accept()
    
    logging.info(f"üåç –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è! ID: {user_id}")

    try:
        # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ö–ê–ñ–î–û–ú–£ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ –õ–Æ–ë–û–ú –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        welcome_message = "Address me as @ShrokAI and type your message so I can hear you."
        await websocket.send_text(welcome_message)  # –ë–µ–∑ "ShrokAI:"
        logging.info(f"üì© –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {welcome_message}")

        # ‚úÖ –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        dialogue_history[user_id] = []

        while True:
            data = await websocket.receive_text()
            logging.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {data}")

            if len(data) > 256:
                logging.warning(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ—Ç {user_id}, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º!")
                continue  

            dialogue_history[user_id].append(f"User: {data}")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = generate_shrokai_response(data, dialogue_history[user_id])

            # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –æ—Ç–≤–µ—Ç—ã AI –≤ TTS
            send_to_tts(response)

            # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ß–ò–°–¢–´–ô —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–±–µ–∑ "ShrokAI:")
            await websocket.send_text(response)
            logging.info(f"üì© –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {response}")

    except WebSocketDisconnect:
        logging.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª—é—á–∏–ª—Å—è.")
        if user_id in dialogue_history:
            del dialogue_history[user_id]

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ WebSocket —É {user_id}: {e}")
        await websocket.close(code=1001)

# ========================== #
# üöÄ –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê üöÄ #
# ========================== #

if __name__ == "__main__":
    import uvicorn
    logging.info("üî• –ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞...")
    uvicorn.run(app, host="0.0.0.0", port=8080)

