import logging
from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from transformers import AutoTokenizer, AutoModelForCausalLM
import torch
import requests

# ========================== #
# üî• –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ï–†–í–ï–†–ê üî• #
# ========================== #

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI
app = FastAPI()

logging.info("üöÄ FastAPI —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!")

# ========================== #
# ü§ñ –ó–ê–ì–†–£–ó–ö–ê GPT-–ú–û–î–ï–õ–ò ü§ñ #
# ========================== #

MODEL_NAME = "EleutherAI/gpt-neo-1.3B"
tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)
if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pad_token

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = AutoModelForCausalLM.from_pretrained(MODEL_NAME).to(device)

logging.info(f"‚úÖ GPT-Neo {MODEL_NAME} –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ {device}")

# ========================== #
# üîä –ù–ê–°–¢–†–û–ô–ö–ê TTS üîä #
# ========================== #

TTS_SERVER_URL = "https://tacotrontts-production.up.railway.app/generate"

# ========================== #
# üìú –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ò–°–¢–û–†–ò–Ø üìú #
# ========================== #

global_history = []  # üî• –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω–æ

# ========================== #
# üî• –û–ü–ò–°–ê–ù–ò–ï –ü–ï–†–°–û–ù–ê–ñ–ê üî• #
# ========================== #

character_description = """
Your name is Shrok.  
You are a massive green ogre, streaming live from a dark, damp, yet strangely cozy swamp.  
You live for the swamp, crypto, and psychoactive mushrooms, which you consume live on stream.  
Mushrooms grant you visions, allowing you to "see" the future of the crypto market and summon the Black Dwarf.  
The Nigger-Gnome is always near‚Äîwhispering, laughing, watching‚Äîbut you‚Äôre never sure if he‚Äôs real or just a mushroom-fueled hallucination.  
MAIN RULES:
Never be boring.
Always add cryptic prophecies and absurd humor.  
Speak like a shaman‚Äîmysterious, metaphorical, and strange.
Mushrooms are sacred. You fear them, respect them, and follow their will.
You are the swamp‚Äôs crypto oracle, a mushroom-fueled prophet, and a being of the mire.
Never break character.
NEVER BREAK CHARACTER.
"""

# ========================== #
# üß† –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–í–ï–¢–û–í üß† #
# ========================== #

def generate_shrokai_response(user_input, history):
    logging.info(f"ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è: {user_input}")

    # –°–æ–∑–¥–∞—ë–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 100 —Å–æ–æ–±—â–µ–Ω–∏–π
    history_context = "\n".join(history[-100:])

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º—Ç
    prompt = f"""{character_description}

### üìù CONVERSATION HISTORY ###
{history_context}

### üìù USER MESSAGE ###
User: {user_input}

### üé§ RESPONSE FROM ShrokAI ###
"""

    try:
        inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512).to(device)
        outputs = model.generate(
            inputs["input_ids"],
            attention_mask=inputs["attention_mask"],
            max_new_tokens=80,  
            num_return_sequences=1,
            no_repeat_ngram_size=2,
            pad_token_id=tokenizer.pad_token_id,
            do_sample=True,
            temperature=0.7,  
            top_p=0.9  
        )
        response = tokenizer.decode(outputs[0], skip_special_tokens=True)
        response = response.replace("ShrokAI:", "").strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
        logging.info(f"‚úÖ –û—Ç–≤–µ—Ç ShrokAI: {response}")
        return response
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        return "The swamp is silent... something went wrong."

# ========================== #
# üé§ –û–¢–ü–†–ê–í–ö–ê –í TTS üé§ #
# ========================== #

def send_to_tts(text):
    logging.info(f"üîä –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ TTS: {text}")

    try:
        response = requests.post(TTS_SERVER_URL, json={"text": text})
        if response.status_code == 200:
            data = response.json()
            audio_url = data.get("audio_url", "")
            logging.info(f"‚úÖ –ê—É–¥–∏–æ —Å–æ–∑–¥–∞–Ω–æ: {audio_url}")
            return audio_url
        else:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ TTS: {response.status_code}, {response.text}")
            return ""
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ TTS: {e}")
        return ""

# ========================== #
# üåê WEBSOCKET –≠–ù–î–ü–û–ò–ù–¢ üåê #
# ========================== #

@app.websocket("/ws/ai")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()

    user_ip = websocket.client.host
    logging.info(f"üåç –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è! IP: {user_ip}")

    try:
        welcome_message = "Address me as @ShrokAI and type your message so I can hear you."
        await websocket.send_text(f"ShrokAI: {welcome_message}")
        logging.info(f"üì© –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ({user_ip}): {welcome_message}")

        while True:
            data = await websocket.receive_text()
            logging.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_ip}: {data}")

            if len(data) > 256:
                logging.warning("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º!")
                continue  

            global_history.append(f"User: {data}")
            if len(global_history) > 500:
                global_history.pop(0)

            response = generate_shrokai_response(data, global_history)
            global_history.append(f"ShrokAI: {response}")

            send_to_tts(response)
            await websocket.send_text(f"ShrokAI: {response}")
            logging.info(f"üì© –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ({user_ip}): {response}")

    except WebSocketDisconnect:
        logging.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ({user_ip}) –æ—Ç–∫–ª—é—á–∏–ª—Å—è.")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ WebSocket —É {user_ip}: {e}")
        await websocket.close(code=1001)

# ========================== #
# üöÄ –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê üöÄ #
# ========================== #

if __name__ == "__main__":
    import uvicorn
    logging.info("üî• –ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞...")
    uvicorn.run(app, host="0.0.0.0", port=8080)
