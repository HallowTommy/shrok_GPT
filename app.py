import logging
from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from transformers import AutoTokenizer, AutoModelForCausalLM
import torch
import requests

# ========================== #
# üî• –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ï–†–í–ï–†–ê üî• #
# ========================== #

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI
app = FastAPI()

logging.info("üöÄ FastAPI —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!")

# ========================== #
# ü§ñ –ó–ê–ì–†–£–ó–ö–ê GPT-–ú–û–î–ï–õ–ò ü§ñ #
# ========================== #

MODEL_NAME = "EleutherAI/gpt-neo-1.3B"
tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)
if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pad_token

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = AutoModelForCausalLM.from_pretrained(MODEL_NAME).to(device)

logging.info(f"‚úÖ GPT-Neo {MODEL_NAME} –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ {device}")

# ========================== #
# üîä –ù–ê–°–¢–†–û–ô–ö–ê TTS üîä #
# ========================== #

TTS_SERVER_URL = "https://tacotrontts-production.up.railway.app/generate"

# ========================== #
# üî• –û–ü–ò–°–ê–ù–ò–ï –ü–ï–†–°–û–ù–ê–ñ–ê üî• #
# ========================== #

character_description = """
Your name is Shrok, a green ogre streamer obsessed with psychoactive mushrooms.
They grant you visions of the crypto market‚Äôs future and summon the niger gnome.
You are a swamp prophet of memecoins, a mushroom-fueled shaman, and a die-hard Solana enthusiast.
"""

# ========================== #
# üß† –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–í–ï–¢–û–í üß† #
# ========================== #

def generate_shrokai_response(user_input):
    logging.info(f"ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è: {user_input}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å —á–µ—Ç–∫–∏–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º
    prompt = f"""{character_description}

### USER INPUT ###
{user_input}

### RESPONSE ###
"""

    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=256).to(device)

    outputs = model.generate(
        inputs["input_ids"],
        attention_mask=inputs["attention_mask"],
        max_new_tokens=20,  
        num_return_sequences=1,
        no_repeat_ngram_size=2,
        pad_token_id=tokenizer.pad_token_id,
        do_sample=True,
        temperature=0.9,  
        top_p=0.9  
    )
    response = tokenizer.decode(outputs[0], skip_special_tokens=True).strip()

    # üî• –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ TTS –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    response = response.replace(prompt, "").strip()  # –£–¥–∞–ª—è–µ–º –≤–µ—Å—å –ø—Ä–æ–º–ø—Ç
    response = response.replace("### RESPONSE ###", "").strip()  # –£–¥–∞–ª—è–µ–º —Ç–µ–≥
    response = response.replace("ShrokAI:", "").strip()  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–µ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ

    logging.info(f"‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç ShrokAI: {response}")
    return response

# ========================== #
# üé§ –û–¢–ü–†–ê–í–ö–ê –í TTS üé§ #
# ========================== #

def send_to_tts(text):
    logging.info(f"üîä –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ TTS: {text}")

    try:
        response = requests.post(TTS_SERVER_URL, json={"text": text})
        if response.status_code == 200:
            logging.info("‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
            return True  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞—É–¥–∏–æ
        else:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ TTS: {response.status_code}, {response.text}")
            return False
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ TTS: {e}")
        return False

# ========================== #
# üåê WEBSOCKET –≠–ù–î–ü–û–ò–ù–¢ üåê #
# ========================== #

@app.websocket("/ws/ai")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()

    user_ip = websocket.client.host
    logging.info(f"üåç –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è! IP: {user_ip}")

    try:
        welcome_message = "Address me as @ShrokAI and type your message so I can hear you."
        await websocket.send_text(f"ShrokAI: {welcome_message}")
        logging.info(f"üì© –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ({user_ip}): {welcome_message}")

        while True:
            data = await websocket.receive_text()
            logging.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_ip}: {data}")

            response = generate_shrokai_response(data)

            # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ TTS –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            tts_success = send_to_tts(response)

            if tts_success:
                # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ
                await websocket.send_text(f"ShrokAI: {response}")
                logging.info(f"üì© –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ({user_ip}): {response}")
            else:
                logging.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ, —Ç–µ–∫—Å—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

    except WebSocketDisconnect:
        logging.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ({user_ip}) –æ—Ç–∫–ª—é—á–∏–ª—Å—è.")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ WebSocket —É {user_ip}: {e}")
        await websocket.close(code=1001)

# ========================== #
# üöÄ –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê üöÄ #
# ========================== #

if __name__ == "__main__":
    import uvicorn
    logging.info("üî• –ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞...")
    uvicorn.run(app, host="0.0.0.0", port=8080)
